<%= render 'componants/searchbar' %>
<main class="service-card">
  <div class="images-container">
    <div class="main-image">
      <img src="batman-main.jpg" alt="Batman silhouette">
    </div>
    <div class="secondary-images">
      <img src="batman-street.jpg" alt="Batman street">
      <img src="batman-smoke.jpg" alt="Batman smoke">
    </div>
  </div>
  <div class="service-info">
    <h1>Daddy <%= @daddy_service.category.name.capitalize %> :
      <%= @daddy_service.user.username %>
    </h1>
    <div class="rating">
      <span class="stars">⭐ <%= @daddy_service.average_rating %></span>
      <span class="reviews">(<%= @daddy_service.reviews.count %>)</span>
      <span class="duration">1.7 hours</span>
      <%= link_to "new Review", new_daddy_service_review_path(@daddy_service) %>
      <%= link_to "See review", reviews_path %>
    </div>
    <p class="description"><%= @daddy_service.description %></p>
  </div>
  <aside class="pricing-card">
    <h2><%= @daddy_service.title %></h2>
    <div class="price"><%= @daddy_service.price %> $ par jour</div>
    <p class="highlight">Le Self Defense comme vous ne l'avez jamais vu.</p>
    <p>Combat les méchants la nuit.</p>
    <!-- Le bouton qui ouvre le modal -->
    <button id="book-button" class="book-button">Prendre rendez-vous</button>
    <!-- Le modal -->
    <div id="booking-modal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Réserver votre rendez-vous</h2>
        <%= simple_form_for [@daddy_service, Appointment.new] do |f| %>
          <div class="booking-steps">
            <!-- Étape 1: Sélection de la date -->
            <div class="date-selection">
              <%= f.input :date,
                                  as: :date,
                                  html5: true,
                                  label: "Choisissez une date",
                                  input_html: {
                                    min: Date.today,
                                    class: 'date-picker'
                                  } %>
            </div>
            <!-- Étape 2: Sélection de l'heure -->
            <div class="time-slots">
              <label>Choisissez un créneau</label>
              <div class="slots-grid">
                <% (9..17).each do |hour| %>
                  <% [0, 30].each do |minutes| %>
                    <%
                              time = sprintf("%02d:%02d", hour, minutes)
                              is_booked = @daddy_service.appointments.exists?(
                                date: Date.today.beginning_of_day + hour.hours + minutes.minutes
                              )
                            %>
                    <button type="button"
                                    class="time-slot <%= 'booked' if is_booked %>"
                                    <%= 'disabled' if is_booked %>
                                    data-time="<%= time %>">
                      <%= time %>
                    </button>
                  <% end %>
                <% end %>
              </div>
              <%= f.input :time, as: :hidden %>
            </div>
          </div>
          <%= f.button :submit, "Confirmer la réservation", class: "submit-button" %>
        <% end %>
      </div>
    </div>
    <%= link_to 'Index', appointments_path %>
  </aside>
</main>
</body>
</html>
<script>
  // Sélection des éléments
  const bookButton = document.getElementById('book-button');
  const modal = document.getElementById('booking-modal');
  const closeButton = document.querySelector('.close');
  const bookingForm = document.getElementById('booking-form');

  // Ouvrir le modal
  bookButton.addEventListener('click', () => {
    modal.style.display = 'block';
    // Petit délai pour permettre l'animation
    setTimeout(() => {
      modal.classList.add('active');
    }, 10);
  });

  // Fermer le modal
  function closeModal() {
    modal.classList.remove('active');
    setTimeout(() => {
      modal.style.display = 'none';
    }, 300); // Attendre la fin de l'animation
  }

  closeButton.addEventListener('click', closeModal);

  // Fermer le modal en cliquant en dehors
  window.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });



  // Dans votre fichier JavaScript existant
  document.addEventListener('DOMContentLoaded', function() {
    const dateInput = document.querySelector('.date-picker');
    const timeSlots = document.querySelectorAll('.time-slot');
    const timeInput = document.querySelector('#appointment_time');

    timeSlots.forEach(slot => {
      slot.addEventListener('click', function(e) {
        e.preventDefault();
        if (this.classList.contains('booked')) return;

        // Retire la sélection précédente
        timeSlots.forEach(s => s.classList.remove('selected'));

        // Sélectionne le nouveau créneau
        this.classList.add('selected');

        // Met à jour l'input hidden
        timeInput.value = this.dataset.time;
      });
    });


    // Mise à jour des créneaux disponibles quand la date change
    dateInput.addEventListener('change', function() {
      // Ici vous pouvez faire un appel AJAX pour récupérer les créneaux disponibles
      // pour la date sélectionnée et mettre à jour l'affichage
      fetch(`/daddy_services/${daddyServiceId}/available_slots?date=${this.value}`)
        .then(response => response.json())
        .then(data => {
          updateAvailableSlots(data.available_slots);
        });
    });
  });

  document.addEventListener('DOMContentLoaded', function() {
    const dateInput = document.querySelector('.date-picker');
    const timeSlots = document.querySelectorAll('.time-slot');
    const timeInput = document.querySelector('#appointment_time');
    const daddyServiceId = window.location.pathname.split('/')[2]; // Récupère l'ID depuis l'URL

    // Fonction pour mettre à jour les créneaux disponibles
    async function updateAvailableSlots(date) {
      try {
        const response = await fetch(`/daddy_services/${daddyServiceId}/available_slots?date=${date}`);
        const data = await response.json();

        timeSlots.forEach(slot => {
          const time = slot.dataset.time;
          if (data.available_slots.includes(time)) {
            slot.classList.remove('booked');
            slot.disabled = false;
          } else {
            slot.classList.add('booked');
            slot.disabled = true;
          }
        });
      } catch (error) {
        console.error('Erreur lors de la mise à jour des créneaux:', error);
      }
    }

    // Écouteur d'événement pour le changement de date
    dateInput.addEventListener('change', function() {
      updateAvailableSlots(this.value);
      // Réinitialiser la sélection de l'heure
      timeSlots.forEach(s => s.classList.remove('selected'));
      timeInput.value = '';
    });

    // Gestion des clics sur les créneaux horaires
    timeSlots.forEach(slot => {
      slot.addEventListener('click', function(e) {
        e.preventDefault();
        if (this.classList.contains('booked')) return;

        timeSlots.forEach(s => s.classList.remove('selected'));
        this.classList.add('selected');
        timeInput.value = this.dataset.time;
      });
    });

    // Charger les créneaux disponibles pour la date initiale
    if (dateInput.value) {
      updateAvailableSlots(dateInput.value);
    }
  });
</script>
<style>
  .booking-steps {
    margin-bottom: 20px;
  }

  .date-selection {
    margin-bottom: 20px;
  }

  .time-slots {
    margin-bottom: 20px;
  }

  .slots-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
    margin-top: 10px;
  }

  .time-slot {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .time-slot:hover:not(.booked) {
    background: #e67e22;
    color: white;
  }

  .time-slot.selected {
    background: #e67e22;
    color: white;
    border-color: #e67e22;
  }

  .time-slot.booked {
    background: #f5f5f5;
    color: #999;
    cursor: not-allowed;
    text-decoration: line-through;
  }

  .date-picker {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 20px;
  }
  :root {
      --primary-color: #E67E22;
      --text-color: #333;
      --background-color: #fff;
  }

  body {
      margin: 0;
      font-family: Arial, sans-serif;
      color: var(--text-color);
  }

  header {
      padding: 1rem;
      background: var(--background-color);
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  nav {
      display: flex;
      align-items: center;
      justify-content: space-between;
      max-width: 1200px;
      margin: 0 auto;
  }

  .logo {
      background: var(--primary-color);
      color: white;
      width: 40px;
      height: 40px;
      border-radius: 8px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
  }

  .search-bar {
      flex-grow: 1;
      margin: 0 2rem;
    position: relative;
  }

  .search-bar input[type="text"] {
      width: 80%;
      padding: 0.8rem;
      border: 1px solid #ddd;
      border-radius: 4px;
  }

  .search-button {
      background: var(--primary-color);
      color: white;
      border: none;
      padding: 0.8rem 1.5rem;
      border-radius: 4px;
      cursor: pointer;
  }

   .search-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(230, 126, 34, 0.3);
      background: #d35400;
  }

  .search-button:active {
      transform: translateY(0);
      box-shadow: 0 2px 8px rgba(230, 126, 34, 0.3);
  }

  .search-button::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: -100%;
      background: linear-gradient(
          120deg,
          transparent,
          rgba(255, 255, 255, 0.2),
          transparent
      );
      transition: 0.5s;
  }

  .search-button:hover::after {
      left: 100%;
  }

  .service-card {
      max-width: 1200px;
      margin: 2rem auto;
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      padding: 0 1rem;
  }

  .images-container {
      grid-column: 1 / 2;
  }

  .main-image img {
      width: 100%;
      height: 400px;
      object-fit: cover;
      border-radius: 8px;
  }

  .secondary-images {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin-top: 1rem;
  }

  .secondary-images img {
      width: 100%;
      height: 200px;
      object-fit: cover;
      border-radius: 8px;
  }

  .pricing-card {
      background: #faf9f8;
      padding: 2rem;
      border-radius: 8px;
      position: sticky;
      top: 2rem;
  }

  .price {
      font-size: 2rem;
      font-weight: bold;
      margin: 1rem 0;
  }

  .book-button {
      /* Garder les styles existants */
      width: 100%;
      background: var(--primary-color);
      color: white;
      border: none;
      padding: 1rem;
      border-radius: 4px;
      font-size: 1.1rem;
      cursor: pointer;
      margin-top: 2rem;

      /* Ajout des animations */
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
  }

  .book-button:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(230, 126, 34, 0.3);
      background: #d35400;
  }

  .book-button:active {
      transform: translateY(0);
      box-shadow: 0 2px 8px rgba(230, 126, 34, 0.3);
  }

  .book-button::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: -100%;
      background: linear-gradient(
          120deg,
          transparent,
          rgba(255, 255, 255, 0.2),
          transparent
      );
      transition: 0.5s;
  }

  .book-button:hover::after {
      left: 100%;
  }

    .rating {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin: 1rem 0;
    }
  .search-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: white;
    margin-top: 4px;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    z-index: 1000;
  }

  .suggestion-item {
    display: block;
    padding: 12px 16px;
    color: #2563eb;
    text-decoration: none;
    font-size: 14px;
    transition: background-color 0.2s ease;
  }

  .suggestion-item:hover {
    background-color: #f8f9fa;
  }

  .search-suggestions a {
    display: block;
    padding: 0.8rem 1rem;
    color: var(--text-color);
    text-decoration: none;
    border-bottom: 1px solid #eee;
    transition: background-color 0.2s ease;
  }

  .search-suggestions a:last-child {
    border-bottom: none;
  }

  .search-suggestions a:hover {
    background-color: #f8f9fa;
    color: var(--primary-color);
  }


  /* Modal styles */
  /* Styles pour le bouton principal */
  .book-button {
  padding: 12px 24px;
  background: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
  transition: transform 0.2s ease, background 0.3s ease;
  }

  .book-button:hover {
  background: #d35400;
  transform: translateY(-2px);
  }

  /* Styles pour le modal */
  .modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
  opacity: 0;
  transition: opacity 0.3s ease;
  }

  .modal.active {
  opacity: 1;
  }

  .modal-content {
  position: relative;
  background: white;
  width: 90%;
  max-width: 500px;
  margin: 50px auto;
  padding: 30px;
  border-radius: 12px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  transform: translateY(-20px);
  transition: transform 0.3s ease;
  }

  .modal.active .modal-content {
  transform: translateY(0);
  }

  /* Style pour le bouton fermer */
  .close {
  position: absolute;
  top: 20px;
  right: 20px;
  font-size: 24px;
  cursor: pointer;
  color: #666;
  transition: color 0.3s ease;
  }

  .close:hover {
  color: #333;
  }

  /* Styles pour le formulaire */
  .form-group {
  margin-bottom: 24px;
  }

  label {
  display: block;
  margin-bottom: 8px;
  color: #333;
  font-size: 14px;
  }

  input[type="datetime-local"] {
  width: 100%;
  padding: 12px;
  border: 2px solid #eee;
  border-radius: 8px;
  font-size: 16px;
  transition: border-color 0.3s ease;
  }

  input[type="datetime-local"]:focus {
  outline: none;
  border-color: #007bff;
  }

  .submit-button {
  width: 100%;
  padding: 12px;
  background: var(--primary-color);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.2s ease;
  }

  .submit-button:hover {
  background: #d35400;
  transform: translateY(-2px);
  }
</style>
